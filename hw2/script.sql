CREATE TABLE "product" (
                           "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY NOT NULL,
                           "name" varchar(50) UNIQUE NOT NULL,
                           "manufacturer_id" smallint NOT NULL
);

CREATE TABLE "product_category" (
                                    "id" SMALLINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY NOT NULL,
                                    "name" varchar(60) UNIQUE NOT NULL
);

CREATE TABLE "manufacturer" (
                                "id" SMALLINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY NOT NULL,
                                "name" varchar(40) UNIQUE NOT NULL
);

CREATE TABLE "supplier" (
                            "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY NOT NULL,
                            "name" varchar(40) UNIQUE NOT NULL
);

CREATE TABLE "purchase" (
                            "id" BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY NOT NULL,
                            "customer_id" integer NOT NULL,
                            "purchase_delivary_date" date NOT NULL
);

CREATE TABLE "purchase_item" (
                                 "id" BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY NOT NULL,
                                 "id_purchase" bigint NOT NULL,
                                 "id_product" integer NOT NULL,
                                 "id_supplier" integer NOT NULL,
                                 "product_count" integer NOT NULL CHECK ( product_count > 0 ),
                                 "sum" integer NOT NULL CHECK ( sum > 0 ),
                                 "purchase_item_delivery_date" date NOT NULL
);

CREATE TABLE "customer" (
                            "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY NOT NULL,
                            "email" varchar(30) UNIQUE NOT NULL,
                            "phone" varchar(10) UNIQUE NOT NULL
);

CREATE TABLE "product_item" (
                                "id" BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY NOT NULL,
                                "supplier_id" integer NOT NULL,
                                "product_id" integer NOT NULL,
                                "delivery_date" date NOT NULL,
                                "price" integer NOT NULL CHECK ( price > 0 ),
                                "count" integer NOT NULL CHECK ( count >= 0 )
);

CREATE TABLE "credit_card" (
                               "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY NOT NULL,
                               "card_number" varchar(20) NOT NULL,
                               "balance" integer NOT NULL CHECK ( balance >= 0 ),
                               "customer_id" integer NOT NULL
);

CREATE TABLE "product_category_ref" (
                                        "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY NOT NULL,
                                        "product_category_id" smallint NOT NULL,
                                        "product_id" integer NOT NULL
);

COMMENT ON COLUMN "product"."name" IS 'Product name';

COMMENT ON COLUMN "product_category"."name" IS 'Product category name';

COMMENT ON COLUMN "manufacturer"."name" IS 'Manufacturer name';

COMMENT ON COLUMN "purchase"."purchase_delivary_date" IS 'Date of delivering the whole order';

COMMENT ON COLUMN "purchase_item"."product_count" IS 'Count of bought product';

COMMENT ON COLUMN "purchase_item"."sum" IS 'Total cost for current price and count';

COMMENT ON COLUMN "purchase_item"."purchase_item_delivery_date" IS 'Date of delivering the purchase';

COMMENT ON COLUMN "product_item"."delivery_date" IS 'Date when product can be delivered';

COMMENT ON COLUMN "product_item"."price" IS 'Price in minor unit';

COMMENT ON COLUMN "product_item"."count" IS 'Available count in warehousefor supplier';

COMMENT ON COLUMN "credit_card"."card_number" IS 'Credit card number';

COMMENT ON COLUMN "credit_card"."balance" IS 'Balance in minor unit';

ALTER TABLE "product" ADD FOREIGN KEY ("manufacturer_id") REFERENCES "manufacturer" ("id");

ALTER TABLE "purchase_item" ADD FOREIGN KEY ("id_purchase") REFERENCES "purchase" ("id");

ALTER TABLE "purchase_item" ADD FOREIGN KEY ("id_supplier") REFERENCES "supplier" ("id");

ALTER TABLE "purchase_item" ADD FOREIGN KEY ("id_product") REFERENCES "product" ("id");

ALTER TABLE "purchase" ADD FOREIGN KEY ("customer_id") REFERENCES "customer" ("id");

ALTER TABLE "credit_card" ADD FOREIGN KEY ("customer_id") REFERENCES "customer" ("id");

ALTER TABLE "product_item" ADD FOREIGN KEY ("supplier_id") REFERENCES "supplier" ("id");

ALTER TABLE "product_item" ADD FOREIGN KEY ("product_id") REFERENCES "product" ("id");

ALTER TABLE "product_category_ref" ADD FOREIGN KEY ("product_id") REFERENCES "product" ("id");

ALTER TABLE "product_category_ref" ADD FOREIGN KEY ("product_category_id") REFERENCES "product_category" ("id");

CREATE UNIQUE INDEX product_category_ref_product_id_product_category_id_idx ON otus.product_category_ref USING btree(product_id, product_category_id);
ALTER TABLE otus.product ADD column product_search_name tsvector;
UPDATE otus.product SET product_search_name = to_tsvector('english', otus.product.name);
CREATE INDEX product_product_search_name_gin ON otus.product USING gin(product_search_name);
CREATE INDEX product_item_product_id_supplier_id_idx ON otus.product_item USING btree(product_id, supplier_id);
CREATE INDEX credit_card_customer_id_idx ON otus.credit_card USING btree(customer_id);
CREATE INDEX purchase_customer_id_idx ON otus.purchase USING btree(customer_id);
CREATE INDEX purchase_item_id_purchase_idx ON otus.purchase_item USING btree(id_purchase);
CREATE INDEX purchase_item_id_product_idx ON otus.purchase_item USING btree(id_product);
CREATE INDEX purchase_item_id_supplier_idx ON otus.purchase_item USING btree(id_supplier);